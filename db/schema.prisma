// This is your Prisma schema file, learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  name               String
  email              String           @unique
  hashedPassword     String?
  role               String           @default("USER")
  likedArticles      ArticleLike[]
  commentsOnArticles ArticleComment[]
  reactions          Reaction[]
  comments           Comment[]

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model ArticleLike {
  slug   String
  user   User   @relation(fields: [userId], references: [id])
  userId Int

  @@unique([slug, userId])
}

model ArticleComment {
  id        Int      @id @default(autoincrement())
  slug      String
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  comment    Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  bookmark   Bookmark? @relation(fields: [bookmarkId], references: [id])
  bookmarkId String?
  commentId  Int?

  @@unique([commentId, userId])
  @@unique([bookmarkId, userId])
}

model Comment {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  text       String     @db.Text
  reactions  Reaction[]
  author     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmark   Bookmark?  @relation(fields: [bookmarkId], references: [id])
  bookmarkId String?
  userId     Int
}

model Bookmark {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  url         String     @unique @db.VarChar(512)
  host        String?
  title       String?    @db.VarChar(280)
  description String?    @db.VarChar(2048)
  comments    Comment[]
  reactions   Reaction[]
  tag         Tag?       @relation(fields: [tagId], references: [id])
  tagId       String?

  @@index([host])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  bookmarks Bookmark[]
}
